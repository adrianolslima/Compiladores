/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 * @aluna = Bruna Sardagna Sudoski - 12200990
 * 
 */
options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(langX)
package parser;

import java.io.*;
import recovery.*;   // importa as classes de recuperação de erros do AS

public class langX {
final static String Version = "X+++ Compiler - Version 1.0 - 2018";
int contParseError = 0;           // contador de erros sintáticos
boolean debug_recovery;   // controla verbose de recuperação de erros
Token lastError = null;


// Define o método "main" da classe langX.  
  public  static void main(String args[]) throws ParseException 
  {
    boolean debug_as = false;
  	boolean debug_recovery = false;
    
    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador léxico/sintático
    int i;
    boolean ms = false;

    System.out.println(Version);
    // lê os parâmetros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
      if (args [i].equals("-debug_AS")) 
      debug_as = true;
      else 
      if (args [i].equals("-debug_recovery")) 
      debug_recovery = true;
      else
      {
        System.out.println("Usage is: java langX [-debug_AS] " + 
        "[-debug_recovery] inputfile");
        System.exit(0);
      }
    }

    if (args [i].equals("-"))
    { // lê da entrada padrão      
      System.out.println("Reading from standard input . . .");
      parser = new langX(System.in); // cria AS
    }
    else
    { // lê do arquivo
      filename = args [args.length - 1];
      System.out.println("Reading from file " + filename + " . . .");
      try
      { // cria AS
        parser = new langX(new java.io.FileInputStream(filename));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("File " + filename + " not found.");
        return;
      }
    }

    parser.debug_recovery = debug_recovery;
    if (!debug_as) parser.disable_tracing(); // desab. verbose do AS
    try
    {
      parser.program(); // chama o método que faz a análise
    }
    catch (ParseEOFException e)
    {
      System.err.println(e.getMessage());
    }
    finally
    {
      System.out.println(parser.token_source.foundLexError() + 
      " Lexical Errors found");
      System.out.println(parser.contParseError + " Syntactic Errors found");
    }

}  // main

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return s;
  }

  boolean eof; // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token tok;

    if (debug_recovery) // informação sobre a recuperação
    {
      System.out.println();
      System.out.println("*** " + met + " ***");
      System.out.println("     Syncronizing Set: " + g);
    }

    if (g == null) throw e; // se o conjunto é null, propaga a exceção
    tok = getToken(1); // pega token corrente
    while (!eof) // se não chegou ao fim do arquivo
    {
      if (g.contains(tok.kind)) //achou um token no conjunto
      {
        if (debug_recovery) 
        System.out.println("     Found syncronizing token: " + 
        im(tok.kind));
        break;
      }
      if (debug_recovery) 
      System.out.println("     Ignoring token: " + im(tok.kind));
      getNextToken(); // pega próximo token       
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF))  // fim da entrada?   
      eof = true;
    }
    if (tok != lastError)
    {
      System.out.println(e.getMessage());
      lastError = tok;
      contParseError++; // incrementa número de erros
    }
    if (eof) throw new ParseEOFException("EOF found prematurely.");
  }
  
} // langX

PARSER_END(langX)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

/* Espaços a serem desprezados no início de cada token */

SKIP :
{
  " "
| "\n"
| "\r"
| "\t"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

< multilinecomment > SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

< singlelinecomment > SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}


/* Palavras reservadas */

TOKEN :
{
  < BREAK : "break" >
| < CLASS : "class" >
| < CONSTRUCTOR : "constructor" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FOR : "for" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < STRING : "string" >
| < SUPER : "super" >
  /*----Atualizações----*/

| < CHAR : "char" >
| < BOOLEAN : "boolean" >
| < FLOAT : "float" >
| < AND : "and" >
| < OR : "or" >
| < XOR : "xor" >
| < NOT : "not" >
}

/* Constantes */
TOKEN :
{
  < int_constant:(  // números decimais
                  (["0"-"9"] (["0"-"9"])* ) |
                  (["0"-"7"] (["0"-"7"])* ["o", "O"]) |
                  (["0"-"9"] (["0"-"7", "A"-"F","a"-"f"])* ["h", "H"]) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])                    
                 ) >
|
  < string_constant:    // constante string como "abcd bcda"
      "\""( ~["\"","\n","\r"])* "\"" >
|
  < null_constant: "null" > // constante null

/*---Atualizações---*/

| 
  < boolean_constant: "true" | "false" > //Para aceitar valores booleanos
|
  < char_constant:
  "\'" ( ( ([ "\\" ])? [ "n", "r", "t", "'", "\\", "\"" ] ) | ~[ "\n", "\r" ] ) "\'" > //Para aceitar escrever 'a' ou '5', ou caracteres
|
  < float_constant: (<int_constant> "." <int_constant>) |(<int_constant> "." <int_constant> ("e"|"E") ("-" | "+") <int_constant>)  >//Para aceitar valores float
}

/* Identificadores */
TOKEN :
{
  < IDENT : < LETTER > ( < LETTER > | < DIGIT > )* >
| < #LETTER : [ "A"-"Z", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
}


/* Símbolos especiais */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* Operadores */
TOKEN :
{
  < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < REM : "%" >
}


/* Trata os erros léxicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\n",
  "\r",
  "\t",
  "\f",

/*----Atualizações----*/

  "'"

])+>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

|
	<INVALID_CHAR_SIZE:
    "\'" ( ( ([ "\\" ])? ~[ "n", "r", "t", "'", "\\", "\"" ] ) | ( ~[ "\n" ] (~[ "\n" ])+ ) ) "\'" >
  	{
    System.err.println("Line " + input_stream.getEndLine() +  " - Char constant must have the size of 1 ");
    
    countLexError++;;
  }
|
	<INVALID_CHAR:
    "\'" (~[ "\n", "\r", "\'" ])* [ "\n", "\r" ] >
  	{
    System.err.println("Line " + input_stream.getEndLine() +  " - Char constant has a \\n: " + image);
    countLexError++;
  }
}

void program() throws ParseEOFException :
{
  RecoverySet g = First.program;
}
{
  [ classlist(g) ]
  try
  {
    < EOF >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "program");
  }
}

void classlist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = First.classlist.union(g);
}
{
  classdecl(f) [ classlist(g) ]
}

void classdecl(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < CLASS > < IDENT > [ < EXTENDS > < IDENT > ] classbody(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classdecl");
  }
}

//void classbody(RecoverySet g) throws ParseEOFException :
//{
//}
//{
//  try
//  {
//    < LBRACE > 
//    classbodyprestatement(g) 
//    < RBRACE >
//  }
//  catch (ParseException e)
//  {
//    consumeUntil(g, e, "classbody");
//  }
//}

//void classbodyprestatement(RecoverySet g) throws ParseEOFException :
//{
//}
//{
//  try
//  {
//    classbodystatement(g) [ classbodyprestatement(g) ]
//  }
//  catch (ParseException e)
//  {
//    consumeUntil(g, e, "classbodyprestatement");
//  }
//}

void classbody(RecoverySet g) throws ParseEOFException :
{
  RecoverySet     f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
                  f3 = First.methoddecl.union(g).remove(IDENT),
                  f4 = First.constructdecl.union(f3).remove(IDENT),
                  f5 = First.vardecl.union(f4).remove(IDENT);
}
{
  try
  {
    < LBRACE >
    [ classlist(f5) ]
    ( LOOKAHEAD(3) vardecl(f2) < SEMICOLON > 
  	| LOOKAHEAD(3) atribstat(f2) < SEMICOLON > 
  	| constructdecl(f4) 
  	| methoddecl(f3) ) *
	< RBRACE >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classbody");
  }
}

void vardecl(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    (< INT >
  | < STRING >
  | < FLOAT >
  | < BOOLEAN >
  | < CHAR >
  | < OR >
  | < XOR >
  | < NOT >
  | < AND >
  | < IDENT >) 
    < IDENT > (< LBRACKET > < RBRACKET >) * (< ASSIGN > (alocexpression(g)
  | expression(g))) * 
    (< COMMA > < IDENT > (< LBRACKET > < RBRACKET >) * (< ASSIGN > (alocexpression(g)
  | expression(g))) * ) *
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "vardecl");
  }
}

void constructdecl(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < CONSTRUCTOR > methodbody(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "constructdecl");
  }
}

void methoddecl(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {	
    (< INT >
  | < STRING >
  | < FLOAT >
  | < BOOLEAN >
  | < CHAR >
  | < OR >
  | < XOR >
  | < NOT >
  | < AND >
  | < IDENT >) (< LBRACKET > < RBRACKET >) * 
    < IDENT > methodbody(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "methoddecl");
  }
}

void methodbody(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try
  {
    < LPAREN > paramlist(f) < RPAREN > statement(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "methodbody");
  }
}

void paramlist(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    [ (< INT >
    | < STRING >
    | < FLOAT >
    | < BOOLEAN >
    | < CHAR >
    | < OR >
    | < XOR >
    | < NOT >
    | < AND >
    | < IDENT >) < IDENT > (< LBRACKET > < RBRACKET >) *
    (< ASSIGN > (alocexpression(g) | expression(g))) * 
      (< COMMA >
      (< INT >
    | < STRING >
    | < FLOAT >
    | < BOOLEAN >
    | < CHAR >
    | < OR >
    | < XOR >
    | < NOT >
    | < AND >
    | < IDENT >) < IDENT > (< LBRACKET > < RBRACKET >) *
    (< ASSIGN > (alocexpression(g) | expression(g))) *) *
    ]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "paramlist");
  }
}

void statement(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
  RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
}
{
  try
  {
    LOOKAHEAD(< IDENT > < IDENT >) vardecl(f1) < SEMICOLON >
  | LOOKAHEAD(1) atribstat(f1) < SEMICOLON >
  | vardecl(f1) < SEMICOLON >
  | printstat(f1) < SEMICOLON >
  | readstat(f1) < SEMICOLON >
  | returnstat(f1) < SEMICOLON >
  | superstat(f1) < SEMICOLON >
  | ifstat(g)
  | forstat(g)
  | < LBRACE > statlist(f2) < RBRACE >
  | < BREAK > < SEMICOLON >
  | < SEMICOLON >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "statement");
  }
}

void atribstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
  try
  {
    lvalue(f1) < ASSIGN > (alocexpression(g) | expression(g))
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "atribstat");
  }
}

void printstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < PRINT > expression(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "printstat");
  }
}

void readstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < READ > lvalue(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "readstat");
  }
}

void returnstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < RETURN > [ expression(g) ]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "returnstat");
  }
}

void superstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try
  {
    < SUPER > < LPAREN > arglist(f) < RPAREN >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "superstat");
  }
}

void ifstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
}
{
try {
    <IF> <LPAREN> /*logic*/expression(f1) <RPAREN> statement(f2)
    [LOOKAHEAD(1) <ELSE> statement(g)]
}
catch (ParseException e)
{
   consumeUntil(g, e, "ifstat");
}
}

void forstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
}
{
try {
    <FOR> <LPAREN> [atribstat(f1)] <SEMICOLON>
                   [/*logic*/expression(f1)] <SEMICOLON>
                   [atribstat(f2)] <RPAREN>
                    statement(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "forstat");
}
}

void statlist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = First.statlist.remove(IDENT).union(g);
}
{
  try
  {
    statement(f) [ statlist(g) ]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "statlist");
  }
}

void lvalue(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < IDENT > ( < LBRACKET > expression(null) < RBRACKET >
  | < DOT > < IDENT > [ < LPAREN > arglist(null) < RPAREN > ] ) *
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "lvalue");
  }
}

void alocexpression(RecoverySet g) throws ParseEOFException :
{
  RecoverySet 	f1 = new RecoverySet(RPAREN).union(g), 
  				f2 = new RecoverySet(RBRACKET).union(g);
}
{
  < NEW >
  (LOOKAHEAD(2)
    < IDENT > < LPAREN > arglist(f1) < RPAREN >
  | ( < INT >
    | < STRING >
    | < FLOAT >
    | < BOOLEAN >
    | < CHAR >
    | < OR >
    | < XOR >
    | < NOT >
    | < AND >
    | < IDENT > )
    ( < LBRACKET > expression(f2) < RBRACKET > )+
  )
}

void expression(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {	
  	logicexpression() ( ( < XOR > | < OR > ) logicexpression() )*
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "expression");
  }
}

void logicexpression() throws ParseEOFException :
{
}
{
   notexpression() ( < AND > notexpression() )*
}

void notexpression() throws ParseEOFException :
{
}
{
  [ < NOT > ] numexpression()
}

void numexpression() throws ParseEOFException :
{
}
{
  numexpr() [ ( < LT > | < GT > | < LE > | < GE > | < EQ > | < NEQ > ) numexpr() ]
}

void numexpr() throws ParseEOFException :
{
}
{
  term() ( ( < PLUS > | < MINUS > ) term() )*
}

void term() throws ParseEOFException :
{
}
{
  unaryexpr() ( ( < STAR > | < SLASH > | < REM > ) unaryexpr() )*
}

void unaryexpr() throws ParseEOFException :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor() throws ParseEOFException :
{
}
{
  ( < int_constant >
  | < string_constant >
  | < boolean_constant >
  | < char_constant >
  | < float_constant >
  | < null_constant >
  | lvalue(null)
  | < LPAREN > expression(null) < RPAREN >
  )
}

void arglist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
  [ expression(f) ( < COMMA > expression(f) )* ]
}

