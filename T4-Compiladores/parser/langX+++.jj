/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 * @aluna = Bruna Sardagna Sudoski - 12200990
 * 
 */
options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(langX)
package parser;

import java.io.*;
import recovery.*; // importa as classes de recuperção de erros do AS
import syntactTree.*; // importado para permitir a utilização do objeto da classe syntactTree. 

public class langX {
final static String Version = "X+++ Compiler - Version 1.0 - 2018";
int contParseError = 0; // contador de erros sintáticos
boolean debug_recovery; // controla verbose de recuperção de erros
Token lastError = null;

//Programa 9.6

//if ( parser.token_source.foundLexError() // verifica se pode operar sobre
//          + parser.contParseError == 0)  // a árvore sintática
//    {
//        if (print_tree) // exibir a árvore
//        {
//            PrintTree prt = new PrintTree();
//            prt.printRoot(root); // chama método para imprimir árvore
//        }
//        TypeCheck tc = new TypeCheck();
//        try {
//             tc.TypeCheckRoot(root);
//             System.out.println("0 Semantic Errors found");
//        }
//        catch (SemanticException e)
//        {
//            System.out.println(e.getMessage());
//        }
//   }

// Define o mtodo "main" da classe langX.  
  public  static void main(String args[]) throws ParseException 
  {
    boolean debug_as = false;
  	boolean debug_recovery = false;
    
    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador lxico/sinttico
    int i;
    boolean ms = false;

    System.out.println(Version);
    // l os parmetros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
      if (args [i].equals("-debug_AS")) 
      debug_as = true;
      else 
      if (args [i].equals("-debug_recovery")) 
      debug_recovery = true;
      else
      {
        System.out.println("Usage is: java langX [-debug_AS] " + 
        "[-debug_recovery] inputfile");
        System.exit(0);
      }
    }

    if (args [i].equals("-"))
    { // l da entrada padro      
      System.out.println("Reading from standard input . . .");
      parser = new langX(System.in); // cria AS
    }
    else
    { // l do arquivo
      filename = args [args.length - 1];
      System.out.println("Reading from file " + filename + " . . .");
      try
      { // cria AS
        parser = new langX(new java.io.FileInputStream(filename));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("File " + filename + " not found.");
        return;
      }
    }

	ListNode root = null;
    parser.debug_recovery = debug_recovery;
    if (!debug_as) parser.disable_tracing(); // desab. verbose do AS
    try
    {
      root = parser.program(); // chama o mtodo que faz a anlise
    }
    catch (ParseEOFException e)
    {
      System.err.println(e.getMessage());
    }
    finally
    {
      System.out.println(parser.token_source.foundLexError() + 
      " Lexical Errors found");
      System.out.println(parser.contParseError + " Syntactic Errors found");
    }

}  // main

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return s;
  }

  boolean eof; // varivel que indica se EOF foi alcanado

  // o mtodo abaixo consome tokens at alcanar um que pertena ao conjunto
  // de sincronizao
  void consumeUntil(RecoverySet g, 
  ParseException e, 
  String met) throws ParseEOFException, 
  ParseException
  {
    Token tok;

    if (debug_recovery) // informao sobre a recuperao
    {
      System.out.println();
      System.out.println("*** " + met + " ***");
      System.out.println("     Syncronizing Set: " + g);
    }

    if (g == null) throw e; // se o conjunto  null, propaga a exceo
    tok = getToken(1); // pega token corrente
    while (!eof) // se no chegou ao fim do arquivo
    {
      if (g.contains(tok.kind)) //achou um token no conjunto
      {
        if (debug_recovery) 
        System.out.println("     Found syncronizing token: " + 
        im(tok.kind));
        break;
      }
      if (debug_recovery) 
      System.out.println("     Ignoring token: " + im(tok.kind));
      getNextToken(); // pega prximo token       
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF))  // fim da entrada?   
      eof = true;
    }
    if (tok != lastError)
    {
      System.out.println(e.getMessage());
      lastError = tok;
      contParseError++; // incrementa nmero de erros
    }
    if (eof) throw new ParseEOFException("EOF found prematurely.");
  }
  
} // langX

PARSER_END(langX)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

/* Espaos a serem desprezados no incio de cada token */

SKIP :
{
  " "
| "\n"
| "\r"
| "\t"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas */

TOKEN :
{
  < BREAK: "break" > 
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < STRING: "string" >
| < SUPER: "super" >

/*----Atualizaes----*/

| < CHAR: "char" >
| < BOOLEAN: "boolean" >
| < FLOAT: "float" >
| < AND: "and">
| < OR: "or" >
| < XOR: "xor" >
| < NOT: "not" >

}

/* Constantes */
TOKEN :
{
  < int_constant:(  // nmeros decimais
                  (["0"-"9"] (["0"-"9"])* ) |
                  (["0"-"7"] (["0"-"7"])* ["o", "O"]) |
                  (["0"-"9"] (["0"-"7", "A"-"F","a"-"f"])* ["h", "H"]) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])                    
                 ) >
|
  < string_constant:    // constante string como "abcd bcda"
      "\""( ~["\"","\n","\r"])* "\"" >
|
  < null_constant: "null" > // constante null

/*---Atualizaes---*/

| 
  < boolean_constant: "true" | "false" > //Para aceitar valores booleanos
|
  < char_constant:
  "\'" ( ( ([ "\\" ])? [ "n", "r", "t", "'", "\\", "\"" ] ) | ~[ "\n", "\r" ] ) "\'" > //Para aceitar escrever 'a' ou '5', ou caracteres
|
  < float_constant: (<int_constant> "." <int_constant>) |(<int_constant> "." <int_constant> ("e"|"E") ("-" | "+") <int_constant>)  >//Para aceitar valores float
}

/* Identificadores */
TOKEN :
{
  < IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >
}


/* Smbolos especiais */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* Operadores */
TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >

}


/* Trata os erros léxicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\n",
  "\r",
  "\t",
  "\f",

/*----Atualizaes----*/

  "'"

])+>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

|
	<INVALID_CHAR_SIZE:
    "\'" ( ( ([ "\\" ])? ~[ "n", "r", "t", "'", "\\", "\"" ] ) | ( ~[ "\n" ] (~[ "\n" ])+ ) ) "\'" >
  	{
    System.err.println("Line " + input_stream.getEndLine() +  " - Char constant must have the size of 1 ");
    
    countLexError++;;
  }
|
	<INVALID_CHAR:
    "\'" (~[ "\n", "\r", "\'" ])* [ "\n", "\r" ] >
  	{
    System.err.println("Line " + input_stream.getEndLine() +  " - Char constant has a \\n: " + image);
    countLexError++;
  }
}

/*--- Programa 6.4 ---*/
//Revisar
ListNode program() throws ParseEOFException : // atualizado: retorna ListNode
{
  RecoverySet g = First.program;
  
  ListNode l = null, d = null; // incluído
}
{
  [ l = classlist(g) ] // atualizado
  try
  {
    < EOF >
    {return l;} // incluído
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "program");
  }
  	[ d = program() ] //Adicionado 
  {
    return l; // incluído
  }
}

/*--- Programa 6.7 ---*/
ListNode classlist(RecoverySet g) throws ParseEOFException : // atualizado: retorna ListNode
{
  RecoverySet f = First.classlist.union(g);
  
  ClassDeclNode c = null; // incluído
  ListNode l = null; // incluído
}
{
  (
    c = classdecl(f) // atualizado
    {
      if (l == null) 
      l = new ListNode(c);
      else 
      l.add(c);
    }
  )+
  {
    return l;
  }
}

/*--- Programa 6.2 ---*/ 
ClassDeclNode classdecl(RecoverySet g) throws ParseEOFException : // atualizado: retorna ClassDeclNode
{
  Token t1, t2, t3 = null; // incluído
  ClassBodyNode c1 = null; // incluído
}
{
  try
  {
    t1 = < CLASS > t2 = < IDENT > [ < EXTENDS > t3 = < IDENT > ] c1 = classbody(g)
    {
      return new ClassDeclNode(t1, t2, t3, c1);
    }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classdecl");
    return new ClassDeclNode(t1, t2, t3, c1); // incluído
  }
}


void classbody(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    < LBRACE > 
    [ classbodyprestatement(g) ] 
    < RBRACE >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classbody");
  }
}

void classbodyprestatement(RecoverySet g) throws ParseEOFException :
{
}
{
  try
  {
    classbodystatement(g) [ classbodyprestatement(g) ]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classbodyprestatement");
  }
}

/*--- Programa 6.8 ---*/
ClassBodyNode classbodystatement(RecoverySet g) throws ParseEOFException : // atualizado: retorna ClassBodyNode
{  
  RecoverySet 	f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT), 
  				f3 = First.methoddecl.union(g).remove(IDENT), 
  				f4 = First.constructdecl.union(f3).remove(IDENT), 
  				f5 = First.vardecl.union(f4).remove(IDENT);
  				
  ListNode c, v, as, ct, m = null; // incluído
  VarDeclNode vd; // incluído
  AtribNode an; // incluído
  ConstructDeclNode cd; // incluído
  MethodDeclNode md; // incluído
  Token t = null; // incluído
}
{
  try
  {
    t = < LBRACE > // atualizado
    c = classlist(f5) // atualizado
  	LOOKAHEAD(3) vd = vardecl(f2) < SEMICOLON > // atualizado
    {
      if (v == null) 
      v = new ListNode(vd);
      else 
      v.add(vd);
    }
  	LOOKAHEAD(3) an = atribstat(f2) < SEMICOLON > // atualizado
  	{ 
      if (as == null) 
      as = new ListNode(an);
      else 
      v.add(an);
    }
  	cd = constructdecl(f4) // atualizado
  	{ 
      if (ct == null) 
      ct = new ListNode(cd);
      else 
      v.add(cd);
    }
    md = methoddecl(f3) // atualizado
    {
      if (m == null) 
      m = new ListNode(md);
      else 
      v.add(md);
    }
//  | < EOF >
    < RBRACE >
    { return new ClassBodyNode(t, c, v, as, ct, m); } // incluído
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classbodystatement");
    return new ClassBodyNode(t, c, v, as, ct, m); // incluído
  }
}

/*--- Programa 6.10 ---*/
VarDeclNode vardecl(RecoverySet g) throws ParseEOFException : // atualizado: retorna VarDeclNode
{
  Token t1 = null, t2; // incluído
  int k = 0; // incluído
  ListNode l = null; // incluído
//  ExpreNode e1 = null; // incluído
}
{
  try
  {
    (t1 = < INT >
  | t1 = < STRING >
  | t1 = < FLOAT >
  | t1 = < BOOLEAN >
  | t1 = < CHAR >
  | t1 = < OR >
  | t1 = < XOR >
  | t1 = < NOT >
  | t1 = < AND >
  | t1 = < IDENT >) 
	t2 = < IDENT > (< LBRACKET > < RBRACKET > { k++; } ) *
    { l = new ListNode(new VarNode(t2, k)); }
//    (t1 = <ASSIGN> ( e1 = alocexpression(g) |  e1 = expression(g))) * 
    (< COMMA > { k = 0; } t2 = < IDENT > (< LBRACKET > < RBRACKET > { k++; }) *
	{ l.add(new VarNode(t2, k)); }
//    (t1 = <ASSIGN> ( e1 = alocexpression(g) |  e1 = expression(g))) *
) *

    { return new VarDeclNode(t1, l); }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "vardecl");
    return new VarDeclNode(t1, l); // incluído
  }
}

/*--- Programa 6.13 ---*/
ConstructDeclNode constructdecl(RecoverySet g) throws ParseEOFException : // atualizado: retorna ConstructDeclNode
{
  Token t = null; // incluído
  MethodBodyNode m = null; // incluído
}
{
  try
  {
    t = < CONSTRUCTOR > m = methodbody(g) // atualizado
    { return new ConstructDeclNode(t, m); } // incluído
}
  catch (ParseException e)
{
   consumeUntil(g, e, "constructdecl");
   return new ConstructDeclNode(t, m); // incluído
}
}

/*--- Programa 6.13 ---*/
MethodDeclNode methoddecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2 = null;
  int k = 0;
  MethodBodyNode m = null;
}
{
  try
  {	
    (t1 = < INT >
  | t1 = < STRING >
  | t1 = < FLOAT >
  | t1 = < BOOLEAN >
  | t1 = < CHAR >
  | t1 = < OR >
  | t1 = < XOR >
  | t1 = < NOT >
  | t1 = < AND >
  | t1 = < IDENT >) (< LBRACKET > < RBRACKET > { k++;} ) * 
    t2 = < IDENT > m = methodbody(g)
    { return new MethodDeclNode(t1, k, t2, m); }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "methoddecl");
    return new MethodDeclNode(t1, k, t2, m);
  }
}

/*--- Programa 6.16 ---*/
MethodBodyNode methodbody(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null;
  ListNode l = null;
  StatementNode s = null;
  
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try
  {
    t1 = < LPAREN > l = paramlist(f) < RPAREN > s = statement(g)
    { return new MethodBodyNode(t1, l, s); }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "methodbody");
    return new MethodBodyNode(t1, l, s);
  }
}

/*--- Programa 6.18 ---*/
ListNode paramlist(RecoverySet g) throws ParseEOFException :
{
//	RecoverySet f1 = new RecoverySet(IDENT).union(g);

	ListNode p = null, q = null;
	int k = 0;
	Token t1 = null, t2 = null;
//	ExpreNode e1 = null;
}
{
  try
  {
    [
      (t1 = < INT >
    | t1 = < STRING >
    | t1 = < FLOAT >
    | t1 = < BOOLEAN >
    | t1 = < CHAR >
    | t1 = < OR >
    | t1 = < XOR >
    | t1 = < NOT >
    | t1 = < AND >
    | t1 = < IDENT > )
    t2 = < IDENT > ( < LBRACKET > < RBRACKET > { k++; } ) *    
//    (t1 = <ASSIGN> ( e1 = alocexpression(g) | e1 = expression(g) )
    ) *
      {
        q = new ListNode(new VarNode(t2, k));
        p = new ListNode(new VarDeclNode(t1, q));
      }
      (< COMMA > { k = 0; }
      (t1 = < INT >
    | t1 = < STRING >
    | t1 = < FLOAT >
    | t1 = < BOOLEAN >
    | t1 = < CHAR >
    | t1 = < OR >
    | t1 = < XOR >
    | t1 = < NOT >
    | t1 = < AND >
    | t1 = < IDENT > )
    t2 = < IDENT > ( < LBRACKET > < RBRACKET > { k++; } ) *
//    (t1 = <ASSIGN> ( e1 = alocexpression(g) |  e1 = expression(g))) *
    ) *
      {
        q = new ListNode(new VarNode(t2, k));
        p = new ListNode(new VarDeclNode(t1, q));
      }
    ]
    { return p; }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "paramlist");
    return null;
  }
}

StatementNode statement(RecoverySet g) throws ParseEOFException :
{
    StatementNode s = null;
	ListNode l;
	Token t1 = null;
	
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
  RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
}
{
  try
  {
    LOOKAHEAD(<IDENT> <IDENT>)
    s = vardecl(f1) <SEMICOLON> 
|
    LOOKAHEAD(1)
    s = atribstat(f1) <SEMICOLON>
|
    s = vardecl(f1) <SEMICOLON> 
|
    s = printstat(f1) <SEMICOLON>
|
    s = readstat(f1) <SEMICOLON>
|
    s = returnstat(f1) <SEMICOLON>
|
    s = superstat(f1) <SEMICOLON>
|
    s = ifstat(g)
|
    s = forstat(g)
|
    t1 = <LBRACE> l = statlist(f2) <RBRACE> { s = new BlockNode(t1, l); }
|
    t1 = <BREAK> <SEMICOLON> { s = new BreakNode(t1);}
|
    t1 = <SEMICOLON> { s = new NopNode(t1); }

    { return s; }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "statement");
    return new NopNode(t1);
  }
}

AtribNode atribstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2 = null;
Token t1 = null;

RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
try {
    e1 = lvalue(f1) t1 = <ASSIGN> 
    ( e2 = alocexpression(g) |  e2 = expression(g)) 
    { return new AtribNode(t1, e1, e2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "atribstat");
   return new AtribNode(t1, e1, e2);
}
}

PrintNode printstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <PRINT> e1 = expression(g)
      { return new PrintNode(t, e1); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "printstat");
   return new PrintNode(t, e1);
}
}

ReadNode readstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <READ> e1 = lvalue(g)
      { return new ReadNode(t, e1); } 
}
catch (ParseException e)
{
   consumeUntil(g, e, "readstat");
   return new ReadNode(t, e1);
}
}

ReturnNode returnstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <RETURN> [ e1 = expression(g)]
      { return new ReturnNode(t, e1); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "returnstat");
   return new ReturnNode(t, e1);
}
}

SuperNode superstat(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
Token t = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {
    t = <SUPER> <LPAREN> l = arglist(f) <RPAREN>
      { return new SuperNode(t, l); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "superstat");
   return new SuperNode(t, l);
}
}

IfNode ifstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
StatementNode s1 = null,
              s2 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
}
{
try {
    t = <IF> <LPAREN> e1 = expression(f1) <RPAREN> s1 = statement(f2)
    [LOOKAHEAD(1) <ELSE> s2 = statement(g)]
     { return new IfNode(t, e1, s1, s2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "ifstat");
   return new IfNode(t, e1, s1, s2);
}
}

ForNode forstat(RecoverySet g) throws ParseEOFException :
{
AtribNode s1 = null,
          s2 = null;
StatementNode s3 = null;
ExpreNode e1 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
}
{
try {
    t = <FOR> <LPAREN> [s1 = atribstat(f1)] <SEMICOLON>
                   [e1 = expression(f1)] <SEMICOLON>
                   [s2 = atribstat(f2)] <RPAREN>
                    s3 = statement(g)
   { return new ForNode(t, e1, s1, s2, s3); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "forstat");
   return new ForNode(t, e1, s1, s2, s3);
}
}

ListNode statlist(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
StatementNode s = null;

RecoverySet f = First.statlist.remove(IDENT).union(g);
}
{
   s = statement(f) [ l = statlist(g)]
    { return new ListNode(s, l); }
}

ExpreNode lvalue(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null,
          e2 = null;
Token t1 = null,
      t2 = null;
ListNode l = null;
}
{
try {
   t1 = <IDENT> { e1 = new VarNode(t1); }
   (
       t1 = <LBRACKET> e2 = expression(null) <RBRACKET> 
         { e1 = new IndexNode(t1, e1, e2); } 
   |
       LOOKAHEAD(3)
       t1 = <DOT> t2 = <IDENT> <LPAREN> l = arglist(null) <RPAREN>
         { e1 = new CallNode(t1, e1, t2, l); }
   |
       t1 = <DOT> t2 = <IDENT>
         { e1 = new DotNode(t1, e1, t2); }
   )*
   { return e1;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "lvalue");
   return new VarNode(t1);
}
}

ExpreNode alocexpression(RecoverySet g) throws ParseEOFException :
{

  ExpreNode e1 = null,
          e2 = null;
	ListNode l = null;
	Token t1, t2 = null;

	
  RecoverySet 	f1 = new RecoverySet(RPAREN).union(g), 
  				f2 = new RecoverySet(RBRACKET).union(g);
}
{
  t1 = < NEW >
  (LOOKAHEAD(2)
    t2 = < IDENT > < LPAREN > l = arglist(f1) < RPAREN >
    { e1 = new NewObjectNode(t1, t2, l); } 
  | ( t2 = < INT >
    | t2 = < STRING >
    | t2 = < FLOAT >
    | t2 = < BOOLEAN >
    | t2 = < CHAR >
    | t2 = < OR >
    | t2 = < XOR >
    | t2 = < NOT >
    | t2 = < AND >
    | t2 = < IDENT > )
    ( < LBRACKET > e2 = expression(f2) < RBRACKET > {
                if ( l == null )
                   l = new ListNode(e2);
                else
                   l.add(e2);
              }
       )+
          { e1 = new NewArrayNode(t1, t2, l); }
    )
    { return e1; }
}

ExpreNode expression(RecoverySet g) throws ParseEOFException :
{

ExpreNode e1 = null, e2 = null;
Token t = null;
}
{
  try
  {	
  	e1 = logicexpression(g) ( ( t = < XOR > | t = < OR > ) e2 = logicexpression(g) )*
	{e1 = new RelationalLogicNode(t, e1, e2);}

	{return e1;}
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "expression");
	return new RelationalLogicNode(t, e1, e2);
  }
}

ExpreNode logicexpression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t = null;
}
{
   e1 = notexpression(g) ( t = < AND > e2 = notexpression(g) { e1 = new RelationalNotNode(t, e1, e2); }
)*
	{return e1; }
}

ExpreNode notexpression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
  [ t = < NOT > ] e1 = numexpression(g)
{ e1 = new RelationalAndNode(t, e1);}
{return e1;}

}

ExpreNode numexpression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2 = null;
Token t = null;

}
{
try {
    e1 = numexpr() 
    [
      ( t = <LT> | t = <GT> | t = <LE> | t = <GE> | t = <EQ> | t = <NEQ>)
      e2 = numexpr()
        { e1 = new RelationalNode(t, e1, e2); }
    ] 
    { return e1; }
} 
catch (ParseException e)
{
   consumeUntil(g, e, "expression");
   return new RelationalNode(t, e1, e2);
}
}

ExpreNode numexpr() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
    e1 = term() 
    (
       (t = <PLUS> | t = <MINUS>) 
       e2 = term()
         { e1 = new AddNode(t, e1, e2); }
    )*
    {return e1; }
}

ExpreNode term() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
    e1 = unaryexpr() 
    (
       ( t = <STAR> | t = <SLASH>| t = <REM>) 
       e2 = unaryexpr()
         { e1 = new MultNode(t, e1, e2); }
    )*
    { return e1; }
}

ExpreNode unaryexpr() throws ParseEOFException :
{
ExpreNode e;
Token t = null;
}
{
   [( t = <PLUS> | t = <MINUS>)] e = factor()
   { return ( (t == null) ? e : new UnaryNode(t, e));}
}


ExpreNode factor() throws ParseEOFException :
{
ExpreNode e = null;
Token t;

}
{    
    ( 
       t = <int_constant> { e = new IntConstNode(t); }
    | 
       t = <string_constant> { e = new StringConstNode(t); }
    |
       t = <boolean_constant> { e = new BooleanConstNode(t);} 
    |
       t = <char_constant> { e = new CharConstNode(t);} 
    |
       t = <float_constant> { e = new FloatConstNode(t);} 
    | 
       t = <null_constant> { e = new NullConstNode(t); }
    |
       e = lvalue(null) 
    |
       <LPAREN> e = expression(null) <RPAREN>
    )
    { return e; }
}

ListNode arglist(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
ExpreNode e = null;

RecoverySet f =  new RecoverySet(COMMA).union(g);
}
{
    [
       e = expression(f) 
          { l = new ListNode(e); }
       (<COMMA> e = expression(f)
          { l.add(e);}
       )*
    ]
    { return l;}
}
